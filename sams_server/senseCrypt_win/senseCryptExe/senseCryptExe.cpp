// senseCryptExe.cpp : 定义控制台应用程序的入口点。
//

#include <stdio.h>
#include "crypt2.h"
#include "base64.h"

R_RSA_PUBLIC_KEY publicKey={
	0x400,
	{ 0x9c, 0xb9, 0x88, 0xdc, 0xd4, 0x58, 0x35, 0xd7, 0x6f, 0xfd, 0x4b, 0x51, 0xa8, 0xe7, 0x94, 0xab, 0x29, 0x85, 0x23, 0x24, 0x6d, 0x1, 0x6, 0x4d, 0x1f, 0x61, 0x4c, 0xf1, 0x2a, 0x64, 0x4, 0x70, 0x8c, 0x51, 0x4f, 0x5a, 0xd4, 0xdb, 0x9b, 0x6c, 0x67, 0x13, 0x98, 0xc2, 0x12, 0xfc, 0x20, 0xce, 0x13, 0xc5, 0xdc, 0x90, 0xea, 0x44, 0x39, 0xee, 0xe0, 0xe2, 0x36, 0x9a, 0xcb, 0xd5, 0x26, 0xe4, 0x6f, 0xe, 0x73, 0x8a, 0xaa, 0x52, 0x9e, 0xfb, 0xda, 0x23, 0x4c, 0x30, 0x3b, 0xeb, 0xc7, 0xcb, 0xd, 0xaa, 0x32, 0xab, 0x9f, 0xbd, 0x37, 0xf5, 0x4e, 0x45, 0x73, 0x47, 0xa4, 0x8b, 0x72, 0x8f, 0x37, 0xee, 0xd, 0x39, 0x78, 0x7f, 0x7, 0x4d, 0x5d, 0x17, 0x2b, 0x62, 0xcb, 0x67, 0x3d, 0xa6, 0xc4, 0xbe, 0x4a, 0x55, 0x7d, 0xed, 0xd3, 0x31, 0x79, 0xfc, 0xac, 0x2c, 0x27, 0xa2, 0x1f, 0xb5 },
	{ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1 }
};

R_RSA_PRIVATE_KEY privateKey = {
	0x400,
	{0x9c, 0xb9, 0x88, 0xdc, 0xd4, 0x58, 0x35, 0xd7, 0x6f, 0xfd, 0x4b, 0x51, 0xa8, 0xe7, 0x94, 0xab, 0x29, 0x85, 0x23, 0x24, 0x6d, 0x1, 0x6, 0x4d, 0x1f, 0x61, 0x4c, 0xf1, 0x2a, 0x64, 0x4, 0x70, 0x8c, 0x51, 0x4f, 0x5a, 0xd4, 0xdb, 0x9b, 0x6c, 0x67, 0x13, 0x98, 0xc2, 0x12, 0xfc, 0x20, 0xce, 0x13, 0xc5, 0xdc, 0x90, 0xea, 0x44, 0x39, 0xee, 0xe0, 0xe2, 0x36, 0x9a, 0xcb, 0xd5, 0x26, 0xe4, 0x6f, 0xe, 0x73, 0x8a, 0xaa, 0x52, 0x9e, 0xfb, 0xda, 0x23, 0x4c, 0x30, 0x3b, 0xeb, 0xc7, 0xcb, 0xd, 0xaa, 0x32, 0xab, 0x9f, 0xbd, 0x37, 0xf5, 0x4e, 0x45, 0x73, 0x47, 0xa4, 0x8b, 0x72, 0x8f, 0x37, 0xee, 0xd, 0x39, 0x78, 0x7f, 0x7, 0x4d, 0x5d, 0x17, 0x2b, 0x62, 0xcb, 0x67, 0x3d, 0xa6, 0xc4, 0xbe, 0x4a, 0x55, 0x7d, 0xed, 0xd3, 0x31, 0x79, 0xfc, 0xac, 0x2c, 0x27, 0xa2, 0x1f, 0xb5 },
	{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1 },
	{0x83, 0xf3, 0x2d, 0x48, 0x87, 0x3b, 0x31, 0x31, 0x8e, 0x27, 0x1a, 0xa7, 0xc8, 0xe6, 0x18, 0xe4, 0x36, 0x93, 0xd2, 0x2f, 0x93, 0xda, 0x9d, 0xfc, 0x86, 0xa3, 0xfc, 0xc, 0xbb, 0x9c, 0xf3, 0xa3, 0xf2, 0x6f, 0x6e, 0xb9, 0x51, 0xa7, 0x7, 0x67, 0x30, 0x2d, 0x6e, 0x9a, 0x4f, 0x33, 0x99, 0x47, 0x7, 0x9c, 0xb9, 0x84, 0x4, 0xc8, 0xa6, 0x61, 0xf9, 0x52, 0x5b, 0x98, 0xde, 0x6e, 0x3a, 0x4c, 0x1d, 0xa9, 0x5b, 0x43, 0x8, 0x63, 0xd8, 0xc9, 0x32, 0x85, 0x5d, 0x4a, 0xea, 0x1c, 0xb2, 0x15, 0x37, 0xe4, 0xcb, 0xa5, 0xd6, 0x25, 0x13, 0x89, 0x11, 0xe5, 0x52, 0x34, 0x4, 0x28, 0x22, 0x73, 0xa, 0x52, 0x78, 0xc8, 0x1a, 0xb9, 0xce, 0xbb, 0x9f, 0x18, 0x1c, 0x4d, 0xc9, 0x9e, 0x7e, 0x20, 0x8d, 0x4c, 0xe5, 0x1a, 0xa6, 0x7b, 0x70, 0xfc, 0xd5, 0xa5, 0x52, 0x1b, 0xbb, 0x2d, 0xae, 0x1 },
	{{0xd0, 0x8a, 0xef, 0x2b, 0xd0, 0xc8, 0xc1, 0xe2, 0x99, 0x2, 0x8b, 0xd5, 0xda, 0x96, 0xb2, 0xde, 0xa9, 0x13, 0xe5, 0x90, 0xba, 0x4b, 0x95, 0xd2, 0x96, 0xe9, 0xf6, 0xb4, 0xdc, 0x21, 0x43, 0x9d, 0x31, 0x77, 0x9a, 0xaf, 0x44, 0xb0, 0x76, 0xdd, 0xea, 0xc5, 0xc0, 0xe0, 0xc9, 0x35, 0x70, 0xd6, 0xc4, 0xcf, 0x8a, 0x62, 0x1c, 0x58, 0x81, 0xb2, 0x73, 0x20, 0x1, 0xcc, 0xba, 0xc7, 0x94, 0x35 },
	 {0xc0, 0x63, 0xd7, 0xc0, 0x79, 0x37, 0x4f, 0x68, 0xc5, 0x76, 0x7, 0x42, 0x4c, 0x79, 0x75, 0xc5, 0x68, 0x6, 0x66, 0xaa, 0x99, 0x99, 0xba, 0xf9, 0xb5, 0x96, 0x7e, 0x26, 0x36, 0xd7, 0x6f, 0x28, 0x28, 0x1c, 0x86, 0xcd, 0x92, 0x65, 0x26, 0x68, 0xac, 0x6b, 0xd1, 0x78, 0x7b, 0xda, 0x6b, 0x31, 0xde, 0xd3, 0xaf, 0x60, 0x1f, 0x2a, 0xb1, 0x74, 0xc0, 0x73, 0x51, 0xcf, 0xc2, 0x1a, 0xcd, 0x81 }},
	{{0x5a, 0xf9, 0xa1, 0x28, 0xee, 0x26, 0x6, 0x5f, 0x1, 0xfd, 0x18, 0x5f, 0xac, 0xc2, 0x3d, 0x39, 0xe1, 0x6c, 0xaa, 0xa3, 0x1e, 0x82, 0x46, 0xd3, 0xdd, 0xbe, 0x27, 0x3f, 0xf3, 0x20, 0x17, 0xcd, 0x5, 0x7d, 0x75, 0xdf, 0xac, 0x9, 0x87, 0x71, 0x7c, 0x2f, 0xd4, 0xda, 0xbb, 0x2c, 0x33, 0x13, 0x9e, 0x3c, 0x23, 0xd4, 0x75, 0x25, 0x2f, 0x3f, 0x57, 0xf5, 0xc8, 0x93, 0x35, 0x90, 0x47, 0x59 },
	 {0x88, 0xbd, 0x6d, 0xf7, 0x4b, 0x30, 0x58, 0xac, 0x6a, 0xcc, 0x3c, 0xd4, 0x8e, 0x6e, 0x35, 0x9a, 0x9d, 0x19, 0xf, 0x97, 0x69, 0x9c, 0xae, 0x1c, 0x15, 0x48, 0x65, 0x58, 0xdb, 0xd9, 0xbb, 0x13, 0x9b, 0x8e, 0xca, 0xf1, 0x9, 0x80, 0x3, 0x10, 0x9a, 0x9b, 0xf7, 0x41, 0xdf, 0x25, 0x9a, 0xd2, 0xd3, 0x41, 0x39, 0x80, 0xe4, 0x26, 0x0, 0x2, 0xaf, 0x56, 0x47, 0x6b, 0x96, 0xd6, 0x5e, 0x1 }},
	{0x75, 0x43, 0xa9, 0x1c, 0x6e, 0x14, 0x5a, 0x40, 0xae, 0x75, 0x77, 0xa3, 0x93, 0x54, 0x53, 0xe0, 0xcb, 0xb4, 0x36, 0x5b, 0x19, 0x81, 0x40, 0xf1, 0x39, 0xea, 0x27, 0x73, 0xb7, 0x95, 0xf2, 0xaf, 0x74, 0xd3, 0xce, 0x69, 0x64, 0xf8, 0x9, 0xcd, 0xcd, 0x42, 0x37, 0xc9, 0xa0, 0x81, 0x2c, 0xd0, 0x6, 0xb8, 0xd6, 0x66, 0x12, 0xda, 0x3a, 0x5a, 0xf9, 0xf5, 0x84, 0x8d, 0x6d, 0x8d, 0xa2, 0x2e }
};

void rsakeygen()
{
	R_RSA_PUBLIC_KEY *pPubKey = NULL;
	R_RSA_PRIVATE_KEY *pPriKey = NULL;
	R_GenerateRsaKeys(pPubKey, pPriKey);

	FILE* file;
	fopen_s(&file, "key.txt","w");

	/////////////////
	fprintf(file, "\nR_RSA_PUBLIC_KEY\n");
	fprintf(file, "\n\npublicKey.bits=0x%x",pPubKey->bits);
	fprintf(file, "\n\npublicKey.modulus={");
	for(int i=0;i<MAX_RSA_MODULUS_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPubKey->modulus[i]));
	}
	fprintf(file, "}");
	
	fprintf(file, "\n\npublicKey.exponent={");
	for(int i=0;i<MAX_RSA_MODULUS_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPubKey->exponent[i]));
	}
	fprintf(file, "}");
	
	//////////////////
	fprintf(file, "\nR_RSA_PRIVATE_KEY\n");
	fprintf(file, "\n\nprivateKey.bits=0x%x",pPriKey->bits);
	fprintf(file, "\n\nprivateKey.modulus={");
	for(int i=0;i<MAX_RSA_MODULUS_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->modulus[i]));
	}
	fprintf(file, "}");
	fprintf(file, "\n\nprivateKey.publicExponent={");
	for(int i=0;i<MAX_RSA_MODULUS_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->publicExponent[i]));
	}
	fprintf(file, "}");
	fprintf(file, "\n\nprivateKey.exponent={");
	for(int i=0;i<MAX_RSA_MODULUS_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->exponent[i]));
	}
	fprintf(file, "}");
	fprintf(file, "\n\nprivateKey.prime[0]={");
	for(int i=0;i<MAX_RSA_PRIME_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->prime[0][i]));
	}
	fprintf(file, "}");
	fprintf(file, "\n\nprivateKey.prime[1]={");
	for(int i=0;i<MAX_RSA_PRIME_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->prime[1][i]));
	}
	fprintf(file, "}");
	fprintf(file, "\n\nprivateKey.primeExponent[0]={");
	for(int i=0;i<MAX_RSA_PRIME_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->primeExponent[0][i]));
	}
	fprintf(file, "}");
	fprintf(file, "\n\nprivateKey.primeExponent[1]={");
	for(int i=0;i<MAX_RSA_PRIME_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->primeExponent[1][i]));
	}
	fprintf(file, "}");
	fprintf(file, "\n\nprivateKey.coefficient={");
	for(int i=0;i<MAX_RSA_PRIME_LEN;i++){
		fprintf(file, "0x%x, ",(int)(pPriKey->coefficient[i]));
	}
	fprintf(file, "}");

	fclose(file);
}

void testcrypt()
{
	// encrypt
	unsigned char output[200];
	unsigned int outputLen;
	unsigned char input[100] = "55913E37-56F5-4d37-B93E-22B335CA3A06";
	unsigned int inputLen = 36;

	RSAPublicEncrypt(output, &outputLen, input, inputLen, &publicKey);
	// base64 encode
	printf("%s\n", base64_encode(output, outputLen));

	// decrypt
	unsigned char output2[200];
	unsigned int output2Len;
	RSAPrivateDecrypt(output2, &output2Len, output, outputLen, &privateKey);
}

int rsa_encode(unsigned char* input, int length)
{
	unsigned char output[200];
	unsigned int outputLen;

	int ret = RSAPublicEncrypt(output, &outputLen, input, length, &publicKey);
	// base64 encode
	printf("%s\n", base64_encode(output, outputLen));
	return ret;
}

int rsa_decode(unsigned char* input, int length)
{
	unsigned char output[200];
	unsigned int outputLen;
	int ret = RSAPrivateDecrypt(output, &outputLen, input, length, &privateKey);
	output[outputLen] = '\0';
	printf("%s\n", output);
	return ret;
}

int rsa_sign(unsigned char* input, int length)
{
	unsigned char output[200];
	unsigned int outputLen;

	int ret = Sign(DA_SHS, input, length, output, &outputLen, &privateKey);
	// base64 encode
	printf("%s\n", base64_encode(output, outputLen));
	return ret;
}

int rsa_verify(unsigned char* input, int length, unsigned char* clear, int clearLen)
{
	int ret = Verify(DA_SHS, clear, clearLen, input, length, &publicKey);
	return ret;
}

// IN:  senseeCryptExe.exe <input> <type: 0-decode 1-encode 2-sign 3-verify> [cleartext - verify only]
// "OAVnNC6I8SMNSuzTGAjpm/BHvZH+i7kEvQQSS6lyTc5Eo5ZF7pFedAS8GmpEd5zvrxS7S8N3Q6qqfcTLx4tpCM672c2b7TFhHZXiMpCxGfgtODN3uNzCyeHqwhOybnV5yxvSLjhtIDy9G94Oxn5f9j7uMRGY8exiBZEOevHEU1Y=" 0
// "55913E37-56F5-4d37-B93E-22B335CA3A06" 1
// "55913E37-56F5-4d37-B93E-22B335CA3A06" 2
// "E5/Qkj+tCZtP+2wl7uPqsZ/SL/p7BXJenM4Wq9ILrunBbNOFxJHA2f39daTgE503/RS3Ptk+/i6I8VWyFlJ9E7V/bpP+RqiBynpgjcHB8ekN8Ao2d83s+4S5vSdxLXJ/aCLlkiU2BDyL+4TeW87iG6YtCUTg+eRIeC4dqtCc0sI=" 3 "55913E37-56F5-4d37-B93E-22B335CA3A06"
// OUT: cleartext (end with \n)
int main(int argc, char* argv[])
{
	// generate rsa key pair for test
	//rsakeygen();

	// rsa encode/decode test
	//testcrypt();

	int length;
	unsigned char *input;
	int type = atoi(argv[2]);

	// rsa decode
	if(type == 0){
		// base64 decode
		input = base64_decode(argv[1], &length);
		return rsa_decode(input, length);
	}
	// rsa encode
	else if(type == 1){
		input = (unsigned char *)argv[1];
		length = strlen(argv[1]);
		return rsa_encode(input, length);
	}
	// rsa sign
	else if(type == 2){
		input = (unsigned char *)argv[1];
		length = strlen(argv[1]);
		return rsa_sign(input, length);
	}
	// rsa verify
	else if(type == 3){
		// base64 decode
		input = base64_decode(argv[1], &length);
		unsigned char *clear = (unsigned char *)argv[3];
		int clearLen = strlen(argv[3]);
		int ret = rsa_verify(input, length, clear, clearLen);
		printf("ret = %d", ret);
	}
}